<?xml version="1.0" encoding="UTF-8"?>
<implementation>
    <!-- files>L_LuaXP.lua</files -->
    <functions>
        -- -------------------------------------------------------------------------------------------------------------------------
        -- SiteSensor
        -- https://github.com/toggledbits/SiteSensor
        -- Patrick Rigney, patrick@toggledbits.com
        -- -------------------------------------------------------------------------------------------------------------------------
        function startupSiteSensor(dev)
            luup.log("SiteSensor Plugin START-UP!")
            SiteSensor = require("L_SiteSensor1")
            siteSensorTick = SiteSensor.taskTick
            siteSensorRequestHandler = SiteSensor.requestHandler
            luup.register_handler("siteSensorRequestHandler", "SiteSensor")
            return SiteSensor.pluginInit(dev)
        end
    </functions>
    <startup>startupSiteSensor</startup>
    <actionList>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:SiteSensorProbe1</serviceId>
            <name>GetInterval</name>
            <run>
                return -- what we do here doesn't matter, luup uses the relatedStateVariable directly
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:SiteSensorProbe1</serviceId>
            <name>SetInterval</name>
            <run>
                local newInterval = lul_settings.newIntervalValue
                if newInterval ~= nil then newInterval = tonumber(newInterval, 10) end
                if newInterval ~= nil and newInterval >= 60 then
                    luup.variable_set("urn:toggledbits-com:serviceId:SiteSensorProbe1", "Interval", newInterval, lul_device)
                    return true
                end
                return false
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:SiteSensorProbe1</serviceId>
            <name>GetRequestURL</name>
            <run>
                return -- what we do here doesn't matter, luup uses the relatedStateVariable directly
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:SiteSensorProbe1</serviceId>
            <name>SetRequestURL</name>
            <run>
                local newRequestURL = lul_settings.newRequestURL or ""
                if newRequestURL ~= "" then
                    luup.variable_set("urn:toggledbits-com:serviceId:SiteSensorProbe1", "RequestURL", newRequestURL, lul_device)
                    return true
                end
                return false
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:SiteSensorProbe1</serviceId>
            <name>LogRequests</name>
            <run>
                local enabled = ( tonumber( lul_settings.Enabled ) or 0 ) ~= 0
                SiteSensor.requestLogging( lul_device, enabled )
            </run>
        </action>
        <action>
            <serviceId>urn:micasaverde-com:serviceId:SecuritySensor1</serviceId>
            <name>SetArmed</name>
            <run>
                local armed = tonumber(lul_settings.newArmedValue or "0", 10)
                if armed ~= 0 then
                    SiteSensor.arm(lul_device)
                else
                    SiteSensor.disarm(lul_device)
                end
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:SiteSensor1</serviceId>
            <name>AddProbe</name>
            <run>
                SiteSensor.actionAddProbe( lul_device )
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:SiteSensor1</serviceId>
            <name>SetDebug</name>
            <run>
                SiteSensor.actionSetDebug( lul_device, lul_settings.debug )
            </run>
        </action>
    </actionList>
</implementation>
