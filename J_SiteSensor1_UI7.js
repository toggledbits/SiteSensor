var SiteSensor = (function(api) {

    // unique identifier for this plugin...
    var uuid = '11816AA9-0C7C-4E90-B490-AAB429FA1410';

    var serviceId = "urn:toggledbits-com:serviceId:SiteSensor1";

    var myModule = {};

    var myDevice = api.getCpanelDeviceId();

    function onBeforeCpanelClose(args) {
        // console.log('handler for before cpanel close');
    }

    function initPlugin() {
        api.registerEventHandler('on_ui_cpanel_before_close', myModule, 'onBeforeCpanelClose');
    }

    function configurePlugin()
    {
        try {
            initPlugin();

            var i, j, roomObj, roomid, html = "";
            
            html += '<script>function validateScene() { var s1 = document.getElementById("addonscene"); var s2 = document.getElementById("addoffscene"); document.getElementById("addscenebtn").disabled = !(s1.selectedIndex > 0 && s2.selectedIndex > 0); }';
            html += 'function dosceneadd() { var s1 = document.getElementById("addonscene"); var s2 = document.getElementById("addoffscene"); if (s1.selectedIndex > 0 && s2.selectedIndex > 0) DeusExMachinaII.addScenePair(s1.options[s1.selectedIndex].value, s2.options[s2.selectedIndex].value); }';
            html += '</script>';
            html += '<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">';
            html += '<style>.material-icons { vertical-align: -20%; }';
            html += '.demslider { display: inline-block; width: 200px; height: 1em; border-radius: 8px; position: absolute; left: 300px;}';
            html += '.demslider .ui-slider-handle { background: url("/cmh/skins/default/img/other/slider_horizontal_cursor_24.png?") no-repeat scroll left center rgba(0,0,0,0); cursor: pointer !important; height: 24px !important; width: 24px !important; margin-top: 6px; }';
            html += '.demslider .ui-slider-range-min { background-color: #12805b !important; }';
            html += 'ul#scenepairs { list-style: none; }';
            html += '.cursor-hand { cursor: pointer; }';
            html += '.color-red { color: #ff0000; }';
            html += '.color-green { color: #12805b; }';
            html += '.numfield { text-align: center; }';
            html += '</style>';

            // Request URL
            html += "<h2>Request URL</h2><label for=\"requestURL\">Enter the URL to be requested:</label><br/>";
            html += "<textarea type=\"text\" rows=\"3\" cols=\"64\" wrap=\"soft\" onChange=\"SiteSensor.checkURL()\" id=\"requestURL\" />";

            // Request interval
            html += "<h2>Request Interval</h2><label for=\"timeout\">Enter the number of seconds between requests:</label><br/>";
            html += "<input type=\"text\" size=\"5\" maxlength=\"5\" class=\"numfield\" onChange=\"SiteSensor.checkInterval()\" id=\"interval\" />";
            html += " <input type=\"checkbox\" value=\"1\" id=\"queryarmed\" onChange=\"SiteSensor.checkQueryArmed()\">&nbsp;Query only when armed";

            // Request timeout
            html += "<h2>Request Timeout</h2><label for=\"timeout\">Timeout (seconds):</label><br/>";
            html += "<input type=\"text\" size=\"5\" maxlength=\"5\" class=\"numfield\" onChange=\"SiteSensor.checkTimeout()\" id=\"timeout\" />";

            // Trigger
            html += "<h2>Trigger Type</h2><label for=\"trigger\">Sensor is triggered when:</label><br/>";
            html += '<select id="trigger" onChange="SiteSensor.checkTrigger(this)"><option value="">Pattern matches response</option>';
            html += '<option value="neg">Pattern does not match response</option>';
            html += '<option value="err">An error is generated by the server</option>';
            html += '</select>';
            
            // Response pattern
            html += "<h2>Response Pattern</h2><label for=\"pattern\">Enter the pattern to match in the reply:</label><br/>";
            html += "<input type=\"text\" size=\"64\" onChange=\"SiteSensor.checkPattern()\" id=\"pattern\" />";

            // Push generated HTML to page
            api.setCpanelContent(html);
          
            // Restore values
            var s;
            s = api.getDeviceState(myDevice, serviceId, "RequestURL");
            if (s !== undefined) jQuery("#requestURL").val(s);
            
            s = api.getDeviceState(myDevice, serviceId, "Pattern");
            if (s !== undefined) jQuery("#pattern").val(s)
            
            s = parseInt(api.getDeviceState(myDevice, serviceId, "Interval"));
            if (isNaN(s))
                s = 1800;
            jQuery("input#interval").val(s);
            
            s = parseInt(api.getDeviceState(myDevice, serviceId, "QueryArmed"));
            if (isNaN(s))
                s = 1;
            if (s != 0) jQuery("input#queryarmed").attr("checked", 1);
            
            s = parseInt(api.getDeviceState(myDevice, serviceId, "Timeout"));
            if (isNaN(s))
                s = 60;
            jQuery("input#timeout").val(s);
            
            s = api.getDeviceState(myDevice, serviceId, "Trigger");
            if (s !== undefined) jQuery('select#trigger option[value="' + s + '"]').prop('selected', true);
        }
        catch (e)
        {
            Utils.logError('Error in SiteSensor.configurePlugin(): ' + e);
        }
    }

    myModule = {
        uuid: uuid,
        initPlugin: initPlugin,
        onBeforeCpanelClose: onBeforeCpanelClose,
        configurePlugin: configurePlugin
    };
    return myModule;
})(api);